import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from '../../../../environments/environment';

export interface TelegramCalculatorData {
  phone: string;
  title: string;
  basePrice: number;
  fixedOptions: string[];
  selectedOptions: Array<{ name: string; price: number }>;
  totalPrice: number;
}

@Injectable({
  providedIn: 'root',
})
export class TelegramService {
  private readonly botToken = environment.telegram.botToken;
  private readonly apiUrl = `https://api.telegram.org/bot${this.botToken}`;
  private readonly chatId = environment.telegram.chatId;

  constructor(private http: HttpClient) {}

  sendCalculatorRequest(data: TelegramCalculatorData): Observable<any> {
    // Chat_id –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É

    const message = this.formatCalculatorMessage(data);

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
    console.log('–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', message.length);
    console.log('Chat ID:', this.chatId);

    if (!message || message.trim().length === 0) {
      throw new Error('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã.');
    }

    const body = {
      chat_id: this.chatId,
      text: message,
      // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      // parse_mode: 'HTML',
    };

    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', body);

    return this.http.post(`${this.apiUrl}/sendMessage`, body);
  }

  private formatCalculatorMessage(data: TelegramCalculatorData): string {
    const selectedOptionsText = data.selectedOptions
      .map(
        (option) => `${option.name} (+${option.price.toLocaleString()} —Ä—É–±.)`
      )
      .join('\n');

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const formattedPhone = data.phone.startsWith('+7')
      ? data.phone
      : `+7 ${data.phone}`;

    return (
      `üöÄ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ ${data.title}!\n\n` +
      `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${formattedPhone}\n` +
      `üí∞ –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${data.basePrice.toLocaleString()} —Ä—É–±.\n\n` +
      `üìã –í–∫–ª—é—á–µ–Ω–æ –≤ –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å:\n${data.fixedOptions
        .map((option) => `‚úÖ ${option}`)
        .join('\n')}\n\n` +
      (selectedOptionsText
        ? `üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:\n${selectedOptionsText}\n\n`
        : '') +
      `üíµ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${data.totalPrice.toLocaleString()} —Ä—É–±.`
    );
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  getUpdates(): Observable<any> {
    return this.http.get(`${this.apiUrl}/getUpdates`);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
  getBotInfo(): Observable<any> {
    return this.http.get(`${this.apiUrl}/getMe`);
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –∏ chat ID
  getBotToken(): string {
    return this.botToken;
  }

  getChatId(): string {
    return this.chatId;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Ñ–æ—Ä–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏)
  sendContactMessage(
    name: string,
    email: string,
    phone: string
  ): Observable<any> {
    const message = this.formatContactMessage(name, email, phone);

    const body = {
      chat_id: this.chatId,
      text: message,
    };

    return this.http.post(`${this.apiUrl}/sendMessage`, body);
  }

  private formatContactMessage(
    name: string,
    email: string,
    phone: string
  ): string {
    return (
      `üìû –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!\n\n` +
      `üë§ –ò–º—è: ${name}\n` +
      `üìß Email: ${email}\n` +
      `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n\n` +
      `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`
    );
  }
}
